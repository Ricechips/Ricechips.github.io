<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Centos7-kvm</title>
      <link href="/2020/08/20/Centos7-kvm/"/>
      <url>/2020/08/20/Centos7-kvm/</url>
      
        <content type="html"><![CDATA[<h1 id="工作要求，搞了一个礼拜，结合了各大blog文章、各大网站教程，终于把透传完成了，现在总结一下流程8"><a href="#工作要求，搞了一个礼拜，结合了各大blog文章、各大网站教程，终于把透传完成了，现在总结一下流程8" class="headerlink" title="工作要求，搞了一个礼拜，结合了各大blog文章、各大网站教程，终于把透传完成了，现在总结一下流程8."></a>工作要求，搞了一个礼拜，结合了各大blog文章、各大网站教程，终于把透传完成了，现在总结一下流程8.</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p><code>host机:centos7.7</code> kvm虚拟化 <code>虚机：win10</code>  </p></blockquote><h2 id="u盘安装centos"><a href="#u盘安装centos" class="headerlink" title="u盘安装centos"></a>u盘安装centos</h2><blockquote><p>bios设置u盘启动<br>进入安装界面按TAB修改路径<br>将vmlinuz initrd … quiet 改为 vmlinuz initrd=initrd.img linux dd quiet 找到u盘设备名 (我的是sda1)<br>ctrl+alt+del重启 再次配置 vmlinuz … stage2=hd:/dev/sda1 quiet<br>后面正常安装  </p></blockquote><h2 id="kvm安装"><a href="#kvm安装" class="headerlink" title="kvm安装"></a>kvm安装</h2><blockquote><p><em>yum install -y qemu-kvm libvirt virt-install bridge-utils</em> （依次是 用户态 命令行 工具 桥接设备)<br>查询kvm模块 <em>lsmod | grep kvm</em><br>启动libvirtd<br> <em>systemctl enable libvirtd <br>  systemctl start libvirtd <br>   systemctl status libvirtd</em><br>安装virt-manager <br><em>yum -y install virt-manager</em> (这个是虚拟机图形化管理界面)  </p></blockquote><h2 id="显卡透传"><a href="#显卡透传" class="headerlink" title="显卡透传"></a>显卡透传</h2><blockquote><ul><li>配置iommu <em>vim /etc/default/grub</em> 将<em>intel_iommu=on</em>放在<em>GRUB_CMDLINE_LINUX=“ ”</em>里面<br>更新grub <em>grub2-mkconfig -o /boot/grub2/grub.cfg</em>  之后<code>reboot</code><br>用<em>dmesg | grep -e DMAR -e IOMMU</em>看是否有IOMMU enabled输出  </li><li>lspci 找到要透传的显卡，记下ID 如：83:00.0 AMD 83:00.1 Audio  </li></ul><p><em>lspci -vv -s 83:00.0 | grep driver</em>可查其驱动<br>查询到之后将驱动禁用 <em>vim /etc/modprobe.d/blacklist.conf</em> <code>blacklist radeon</code> <code>blacklist snd_hda_intel</code> </p><ul><li>不知道原因但是必须做的一步<br>vim /usr/lib/modprobe.d/dist-blacklist.conf 去掉禁用blacklist radeonfb 加上一行options nouveau modeset=0<br>备份原来的 initramfs nouveau image镜像 mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r)-nouveau.img<br>创建新的 initramfs image镜像 dracut /boot/initramfs-$(uname -r).img $(uname -r)   </li><li>加载vfio驱动<br> <em>modprobe vfio</em><br> <em>modprobe vfio-pci</em>  </li><li>从<code>host机</code>卸载A卡 <br><em>virsh nodedev-detach pci_0000_83_00_0</em> <br><em>virsh nodedev-detach pci_0000_83_00_1</em><br>此时再查询驱动，得到<em>kernel driver in use: vfio-pci</em></li></ul></blockquote><h2 id="安装OVMF"><a href="#安装OVMF" class="headerlink" title="安装OVMF"></a>安装OVMF</h2><blockquote><ul><li><em>wget <a href="http://www.kraxel.org/repos/firmware.repo">http://www.kraxel.org/repos/firmware.repo</a> -O /etc/yum.repos.d/firmware.repo</em>配置yum源  </li></ul><p><em>yum install edk2.git-ovmf-x64</em>  </p><ul><li>配置libvirtd<br> <em>vim /etc/libvirt/qemu.conf</em> <br><code>nvram = [ &quot;/usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd:/usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd&quot;, ]</code>  </li><li>重启libvirtd <br><em>systemctl restart libvirtd</em></li></ul></blockquote><h2 id="安装win10"><a href="#安装win10" class="headerlink" title="安装win10"></a>安装win10</h2><blockquote><p>virt-manager 打开图形管理界面<br>在配置中以UEFI启动<br>CDROM添入win10.iso<br>这里的引导项有：<code>1.CDROM(win10.iso) 2.CDROM(virtio.iso) 3.VirtIO磁盘(100G)</code><br>加载硬盘时选择<code>加载驱动程序</code>，浏览本地文件即<code>virtio-win-0.1.1</code>目录下的<code>viostor\w10\amd64</code><br>添加PCI设备(83:00:0和83:00:1)<br>之后正常装系统<br>ps:virtio是对此win虚机进行优化，性能实测有质的提升 可在<a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/">此处</a>下载 对了,网卡也可以改成virtio,具体路径在<code>NetKVM\w10\amd64</code></p></blockquote><h2 id="usb透传"><a href="#usb透传" class="headerlink" title="usb透传"></a>usb透传</h2><blockquote><p>lsusb查询项透传的usb设备<br>在manager上面直接添加(修改配置文件蛮麻烦的，图形化轻松搞定)</p></blockquote><h3 id="一些心得"><a href="#一些心得" class="headerlink" title="一些心得"></a>一些心得</h3><p>这东西做出来也算是磕破了头吧，查了不知道多少的资料，每一篇都有相似的操作，但又不尽相同，如果按某一篇en头做，基本是失败的，我的做法是结合每篇的精华操作，把流程搞清了，每一步做的意义是什么，明白了之后再具体实现其步骤，有针对性找操作流程，当然，同时不能忘记对硬件的考虑，如<code>硬盘接口脱落，内存条插了总内存反而变少了，主板太热了，无线鼠标会被金属板隔离传输导致卡顿.....</code>行吧，下个任务见。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>ps:Q:failed to set iommu for container: Operation not permitted<br><br>A:echo “1” &gt; /sys/module/vfio_iommu_type1/parameters/allow_unsafe_interrupts<br><br>virt-host-validate 测试环境<br><br><a href="https://blog.acesheep.com/index.php/archives/720/">https://blog.acesheep.com/index.php/archives/720/</a> 教程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>article title</title>
      <link href="/2020/08/19/wsl2/"/>
      <url>/2020/08/19/wsl2/</url>
      
        <content type="html"><![CDATA[<h1 id="wsl2"><a href="#wsl2" class="headerlink" title="wsl2"></a>wsl2</h1><p>windows terminal + wsl2 + kali + lolcat<br><img src="https://github.com/Ricechips/wsl2/blob/master/1.png" alt="avatar"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/19/hello-world/"/>
      <url>/2020/08/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
